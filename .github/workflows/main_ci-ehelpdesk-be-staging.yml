# This workflow will build and push a node.js application to an Azure Web App when a commit is pushed to your default branch.
#
# This workflow assumes you have already created the target Azure App Service web app.
# For instructions see https://docs.microsoft.com/en-us/azure/app-service/quickstart-nodejs?tabs=linux&pivots=development-environment-cli
#
# To configure this workflow:
#
# 1. Download the Publish Profile for your Azure Web App. You can download this file from the Overview page of your Web App in the Azure Portal.
#    For more information: https://docs.microsoft.com/en-us/azure/app-service/deploy-github-actions?tabs=applevel#generate-deployment-credentials
#
# 2. Create a secret in your repository named AZURE_WEBAPP_PUBLISH_PROFILE, paste the publish profile contents as the value of the secret.
#    For instructions on obtaining the publish profile see: https://docs.microsoft.com/azure/app-service/deploy-github-actions#configure-the-github-secret
#
# 3. Change the value for the AZURE_WEBAPP_NAME. Optionally, change the AZURE_WEBAPP_PACKAGE_PATH and NODE_VERSION environment variables below.
#
# For more information on GitHub Actions for Azure: https://github.com/Azure/Actions
# For more information on the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# For more samples to get started with GitHub Action workflows to deploy to Azure: https://github.com/Azure/actions-workflow-samples

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: ci-ehelpdesk-be-staging # set this to your application's name
  AZURE_WEBAPP_PACKAGE_PATH: "." # set this to the path to your web app project, defaults to the repository root
  NODE_VERSION: "20.x" # set this to the node version to use
  DATABASE_URL: ${{ secrets.DATABASE_URL }}
  PRISMA_SKIP_SEED: "true" # Skip automatic seeding during Prisma operations

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"
          
      - name: Create environment files
        run: |
          # Create .env file with DATABASE_URL for Prisma
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "PRISMA_SKIP_SEED=true" >> .env
          
          # Create .env.production file as well
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.production
          echo "PRISMA_SKIP_SEED=true" >> .env.production
          
          echo "Environment files created"

      - name: npm install and build
        run: |
          npm install
          
          # Explicitly generate Prisma client
          npx prisma generate
          
          # Run build script if present
          npm run build --if-present
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PRISMA_SKIP_SEED: "true"

      # Create a deployment script to run on app startup
      - name: Create deployment script
        run: |
          cat > deploy.sh << 'EOF'
          #!/bin/bash
          
          # Generate Prisma client on startup to ensure it matches the environment
          echo "Generating Prisma client..."
          npx prisma generate
          
          # Start the application
          npm start
          EOF
          
          chmod +x deploy.sh
          
          # Update package.json to use the deployment script
          sed -i 's/"start": "node index.js"/"start": "bash .\/deploy.sh"/' package.json
          
          echo "Deployment script created"

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: "Deploy to Azure WebApp"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "ci-ehelpdesk-be-staging"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_3D53255A9C744DB7A6458E5D647265A7 }}
          package: .
