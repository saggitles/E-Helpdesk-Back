# Docs for the Azure Web Apps Deploy action: https://github.com/Azure/webapps-deploy
# More GitHub Actions for Azure: https://github.com/Azure/actions

name: Build and deploy Node.js app to Azure Web App - ci-ehelpdesk-be-staging

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read #This is required for actions/checkout
    
    env:
      DATABASE_URL: ${{ secrets.DATABASE_URL }}
    
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '18.x'

      - name: Debug repository structure
        run: |
          echo "Current directory: $PWD"
          echo "Repository contents:"
          ls -la
          echo "Prisma directory contents:"
          if [ -d "./prisma" ]; then
            ls -la ./prisma
          elif [ -d "prisma" ]; then
            ls -la prisma
          else
            echo "Prisma directory not found in expected locations"
            find . -name "prisma" | sort
          fi
          
          # Create setup script directly if it doesn't exist
          mkdir -p prisma
          
          cat > prisma/setup-github-env.js << 'EOF'
          // This script helps set up the environment for Prisma in GitHub Actions
          const fs = require('fs');
          const path = require('path');

          // Ensure required environment variables are available
          const requiredEnvVars = ['DATABASE_URL'];

          // Function to check environment variables
          function checkEnvVars() {
            const missing = requiredEnvVars.filter(envVar => !process.env[envVar]);
            if (missing.length > 0) {
              console.error(`Missing required environment variables: ${missing.join(', ')}`);
              console.error('Make sure these are set in GitHub Secrets and passed to the workflow');
              process.exit(1);
            } else {
              console.log('All required environment variables are present.');
            }
          }

          // Function to create .env file if it doesn't exist
          function createEnvFile() {
            const envPath = path.resolve(__dirname, '../.env');
            const envProductionPath = path.resolve(__dirname, '../.env.production');
            
            try {
              // Create .env file
              let envContent = '';
              requiredEnvVars.forEach(envVar => {
                envContent += `${envVar}="${process.env[envVar]}"\n`;
              });
              
              // Write both .env and .env.production files
              fs.writeFileSync(envPath, envContent);
              fs.writeFileSync(envProductionPath, envContent);
              
              console.log('.env and .env.production files created successfully');
            } catch (error) {
              console.error('Error creating .env files:', error);
              process.exit(1);
            }
          }

          // Check environment variables
          checkEnvVars();

          // Create .env files
          createEnvFile();

          console.log('Environment setup completed successfully');
          EOF
          
          echo "Setup script created"
          ls -la prisma/

      - name: Create environment files
        run: |
          # Directly create .env file with DATABASE_URL
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env.production
          
          echo "Environment files created"
          
          # Run the setup script we created
          node prisma/setup-github-env.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: npm install, build, and test
        run: |
          npm install
          # Run Prisma generate explicitly with environment variable
          npx dotenv -e .env prisma generate
          npm run build --if-present
          npm run test --if-present
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
      
      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'ci-ehelpdesk-be-staging'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_3D53255A9C744DB7A6458E5D647265A7 }}