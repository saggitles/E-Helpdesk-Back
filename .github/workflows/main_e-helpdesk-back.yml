# Deploy E-Helpdesk Backend to Azure App Service
#
# This workflow builds and deploys a Node.js application to Azure App Service.

name: Build and deploy Node.js app to Azure Web App - E-Helpdesk-back

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: E-Helpdesk-back
  NODE_VERSION: "20.x"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup environment for GitHub Actions
        run: node ./prisma/setup-github-env.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: ${{ secrets.PORT || '8080' }}
          DOMAIN: ${{ secrets.DOMAIN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

      - name: Install ALL dependencies (no pruning until end)
        run: npm install

      - name: Debug environment before Prisma generation
        run: |
          echo "üîç Debug environment before Prisma generation..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)" 
          echo "Current directory: $(pwd)"
          echo "Prisma version: $(npx prisma --version)"
          echo ""
          echo "Checking Prisma schema:"
          ls -la prisma/schema.prisma
          echo ""
          echo "Current node_modules structure:"
          ls -la node_modules/ | grep -i prisma || echo "No prisma directories found yet"

      - name: Force Prisma Client Generation (multiple attempts)
        run: |
          echo "üîß Force generating Prisma client with multiple methods..."
          
          # Set dummy DATABASE_URL for generation
          export DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
          
          # Method 1: Direct generation
          echo "=== Method 1: Direct generation ==="
          npx prisma generate || echo "Method 1 failed"
          
          # Check if it worked
          if [ -d "node_modules/.prisma/client" ]; then
            echo "‚úÖ Method 1 succeeded!"
            ls -la node_modules/.prisma/client/ | head -5
          else
            echo "‚ùå Method 1 failed, trying method 2..."
            
            # Method 2: Generate with schema path
            echo "=== Method 2: Generate with explicit schema ==="
            npx prisma generate --schema=./prisma/schema.prisma || echo "Method 2 failed"
            
            if [ -d "node_modules/.prisma/client" ]; then
              echo "‚úÖ Method 2 succeeded!"
            else
              echo "‚ùå Method 2 failed, trying method 3..."
              
              # Method 3: Use npm script
              echo "=== Method 3: Using npm script ==="
              npm run prisma:generate || echo "Method 3 failed"
              
              if [ -d "node_modules/.prisma/client" ]; then
                echo "‚úÖ Method 3 succeeded!"
              else
                echo "‚ùå All methods failed!"
                echo "Checking what exists:"
                find node_modules -name "*prisma*" -type d
                exit 1
              fi
            fi
          fi

      - name: Comprehensive verification after generation
        run: |
          echo "üîç Comprehensive verification after generation..."
          
          # Check .prisma directory
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ .prisma directory exists"
            echo "Contents of .prisma:"
            ls -laR node_modules/.prisma/
          else
            echo "‚ùå .prisma directory missing!"
            exit 1
          fi
          
          # Check specific files
          REQUIRED_FILES=(
            "node_modules/.prisma/client/index.js"
            "node_modules/.prisma/client/default.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ -f "$file" ]; then
              echo "‚úÖ $file exists ($(ls -lh "$file" | awk '{print $5}'))"
            else
              echo "‚ùå $file missing!"
              exit 1
            fi
          done
          
          # Show a sample of the generated content
          echo "Sample from index.js:"
          head -3 node_modules/.prisma/client/index.js

      - name: Skip npm prune (keep all dependencies for now)
        run: |
          echo "üì¶ Skipping npm prune to preserve Prisma client..."
          echo "Node modules size: $(du -sh node_modules/)"
          
          # Final verification before upload
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client ready for upload"
          else
            echo "‚ùå Prisma client lost!"
            exit 1
          fi

      - name: Upload artifact (with all dependencies)
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Thorough pre-deployment verification
        run: |
          echo "üîç Thorough pre-deployment verification..."
          echo "Package contents:"
          ls -la
          echo ""
          
          echo "Node modules structure:"
          ls -la node_modules/ | grep -i prisma || echo "No prisma directories visible"
          echo ""
          
          # Check for .prisma directory
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ .prisma directory exists in deployment"
            echo "Contents:"
            ls -la node_modules/.prisma/
            
            if [ -d "node_modules/.prisma/client" ]; then
              echo "‚úÖ client directory exists"
              echo "Client files:"
              ls -la node_modules/.prisma/client/ | head -10
              
              if [ -f "node_modules/.prisma/client/index.js" ]; then
                echo "‚úÖ index.js ready for deployment"
                echo "File size: $(ls -lh node_modules/.prisma/client/index.js | awk '{print $5}')"
              else
                echo "‚ùå index.js missing in deployment!"
                exit 1
              fi
            else
              echo "‚ùå client directory missing in deployment!"
              exit 1
            fi
          else
            echo "‚ùå .prisma directory missing in deployment!"
            echo "Available prisma-related files:"
            find . -name "*prisma*" -type f | head -10
            exit 1
          fi

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B848A42705384860A27675DBAFE04932 }}
          package: .
