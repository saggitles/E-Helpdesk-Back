# Deploy E-Helpdesk Backend to Azure App Service
#
# This workflow builds and deploys a Node.js application to Azure App Service.

name: Build and deploy Node.js app to Azure Web App - E-Helpdesk-back

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: E-Helpdesk-back
  AZURE_WEBAPP_PACKAGE_PATH: "."
  NODE_VERSION: "20.x"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install ALL dependencies (including dev)
        run: npm install

      - name: Generate Prisma Client with proper flags
        run: |
          echo "üîß Generating Prisma client..."
          echo "Current directory: $(pwd)"
          echo "Prisma schema location:"
          ls -la prisma/schema.prisma
          
          # Set dummy DATABASE_URL for client generation
          export DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
          
          # Generate without verbose flag (not supported)
          npx prisma generate --schema=./prisma/schema.prisma
          
          echo "‚úÖ Generation command completed"

      - name: Debug Prisma generation
        run: |
          echo "üîç Debugging Prisma generation results..."
          
          # Check what was generated
          echo "Looking for .prisma directories:"
          find . -name ".prisma" -type d 2>/dev/null || echo "No .prisma directories found"
          
          # Check node_modules structure
          echo "Node modules .prisma check:"
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ Found node_modules/.prisma"
            ls -laR node_modules/.prisma/
          else
            echo "‚ùå node_modules/.prisma not found"
            echo "Checking for @prisma directories:"
            find node_modules -name "*prisma*" -type d | head -10
          fi
          
          # Check if Prisma client was generated elsewhere
          echo "Searching for generated client files:"
          find . -name "index.js" -path "*prisma*" 2>/dev/null | head -5
          find . -name "default.js" -path "*prisma*" 2>/dev/null | head -5

      - name: Manual Prisma Client Generation
        run: |
          echo "üî® Attempting manual Prisma client generation..."
          
          # Create the directory structure manually if needed
          mkdir -p node_modules/.prisma/client
          
          # Try different generation methods
          echo "Method 1: Direct generation"
          npx prisma generate || echo "Method 1 failed"
          
          echo "Method 2: With explicit output"
          npx prisma generate --generator client || echo "Method 2 failed"
          
          # Check results
          if [ -d "node_modules/.prisma/client" ] && [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client generated successfully!"
            ls -la node_modules/.prisma/client/
          else
            echo "‚ùå Manual generation failed, trying alternative approach..."
            
            # Alternative: Generate with npm script
            npm run prisma:generate || echo "npm script generation failed"
          fi

      - name: Final verification before production build
        run: |
          echo "üîç Final verification before production build..."
          
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client verified - proceeding with build"
            echo "Client file size: $(ls -lh node_modules/.prisma/client/index.js)"
          else
            echo "‚ùå Prisma client still missing!"
            echo "Available Prisma-related files:"
            find node_modules -name "*prisma*" -type f | grep -E "\.(js|json)$" | head -10
            exit 1
          fi

      - name: Keep Prisma in production build
        run: |
          echo "üì¶ Creating production build while preserving Prisma..."
          
          # Instead of npm prune, manually remove only specific dev dependencies
          # that we know are safe to remove, keeping Prisma intact
          
          echo "Before cleanup:"
          du -sh node_modules/
          
          # Remove known dev-only packages but keep Prisma
          rm -rf node_modules/@eslint 2>/dev/null || true
          rm -rf node_modules/eslint 2>/dev/null || true
          rm -rf node_modules/nodemon 2>/dev/null || true
          rm -rf node_modules/.cache 2>/dev/null || true
          
          echo "After selective cleanup:"
          du -sh node_modules/
          
          # Verify Prisma client is still there
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client preserved through production build"
          else
            echo "‚ùå Prisma client lost during cleanup!"
            exit 1
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Final deployment verification
        run: |
          echo "üìã Deployment package contents:"
          ls -la
          echo ""
          echo "üîç Thorough Prisma client verification..."
          
          # Check for .prisma directory
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ .prisma directory exists"
            ls -la node_modules/.prisma/
            
            if [ -d "node_modules/.prisma/client" ]; then
              echo "‚úÖ client directory exists"
              ls -la node_modules/.prisma/client/
              
              if [ -f "node_modules/.prisma/client/index.js" ]; then
                echo "‚úÖ index.js exists ($(ls -lh node_modules/.prisma/client/index.js))"
              else
                echo "‚ùå index.js missing!"
              fi
              
              if [ -f "node_modules/.prisma/client/default.js" ]; then
                echo "‚úÖ default.js exists"
              else
                echo "‚ùå default.js missing!"
              fi
            else
              echo "‚ùå client directory missing!"
            fi
          else
            echo "‚ùå .prisma directory missing!"
            echo "Checking for any Prisma-related files in deployment:"
            find . -name "*prisma*" -type f | head -10
            exit 1
          fi

      - name: "Deploy to Azure WebApp"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "E-Helpdesk-back"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B848A42705384860A27675DBAFE04932 }}
          package: .
