# Deploy E-Helpdesk Backend to Azure App Service
#
# This workflow builds and deploys a Node.js application to Azure App Service.

name: Build and deploy Node.js app to Azure Web App - E-Helpdesk-back

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: E-Helpdesk-back
  NODE_VERSION: "20.x"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup environment for GitHub Actions
        run: node ./prisma/setup-github-env.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: ${{ secrets.PORT || '8080' }}
          DOMAIN: ${{ secrets.DOMAIN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

      - name: Install dependencies
        run: npm install

      - name: Generate Prisma Client with explicit debugging
        run: |
          echo "üîß Starting Prisma client generation with explicit debugging..."
          
          # Set dummy DATABASE_URL for generation
          export DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
          
          echo "Environment check:"
          echo "DATABASE_URL=$DATABASE_URL"
          echo "Node version: $(node --version)"
          echo "Prisma version:"
          npx prisma --version
          
          echo "Schema validation:"
          npx prisma validate --schema=./prisma/schema.prisma
          
          echo "Starting generation..."
          npx prisma generate --schema=./prisma/schema.prisma 2>&1 | tee prisma-generate.log
          
          echo "Generation exit code: $?"
          echo "Generation log:"
          cat prisma-generate.log || echo "No log file created"

      - name: Check generation results
        run: |
          echo "üîç Checking generation results..."
          
          echo "Checking for .prisma directory:"
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ .prisma directory found!"
            echo "Contents:"
            ls -laR node_modules/.prisma/ || echo "Failed to list contents"
          else
            echo "‚ùå .prisma directory not found"
            echo "Checking @prisma/client directory:"
            if [ -d "node_modules/@prisma/client" ]; then
              echo "Found @prisma/client directory:"
              ls -la node_modules/@prisma/client/ || echo "Failed to list @prisma/client"
              
              # Check if client was generated in @prisma/client instead
              if [ -f "node_modules/@prisma/client/index.js" ]; then
                echo "‚úÖ Found client in @prisma/client, creating symlink..."
                mkdir -p node_modules/.prisma/client
                cp -r node_modules/@prisma/client/* node_modules/.prisma/client/
                echo "Symlink created successfully"
              fi
            else
              echo "‚ùå No @prisma/client directory found either"
            fi
          fi
          
          echo "Final check for required files:"
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ index.js found at node_modules/.prisma/client/index.js"
          elif [ -f "node_modules/@prisma/client/index.js" ]; then
            echo "‚úÖ index.js found at node_modules/@prisma/client/index.js"
            echo "Creating compatibility structure..."
            mkdir -p node_modules/.prisma/client
            cp -r node_modules/@prisma/client/* node_modules/.prisma/client/
          else
            echo "‚ùå No Prisma client found anywhere!"
            echo "Available Prisma files:"
            find node_modules -name "*prisma*" -type f | head -10
          fi

      - name: Deploy anyway with runtime generation fallback
        run: |
          echo "üì¶ Preparing deployment package..."
          echo "The azure-startup.js script will handle Prisma client generation at runtime if needed"
          
          # Clean up unnecessary files but keep everything Prisma-related
          rm -rf node_modules/.cache 2>/dev/null || true
          rm -f prisma-generate.log 2>/dev/null || true
          
          echo "Deployment package ready with runtime fallback"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Pre-deployment check (non-blocking)
        run: |
          echo "üîç Pre-deployment check..."
          
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client found - will use pre-built client"
          elif [ -f "node_modules/@prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client found in @prisma/client - will use pre-built client"
          else
            echo "‚ö†Ô∏è Prisma client not found in build - will rely on runtime generation"
            echo "The azure-startup.js script will handle this automatically"
          fi
          
          echo "Azure startup script location:"
          ls -la prisma/azure-startup.js

      - name: Deploy to Azure WebApp
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B848A42705384860A27675DBAFE04932 }}
          package: .
