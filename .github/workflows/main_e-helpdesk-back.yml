# Deploy E-Helpdesk Backend to Azure App Service
#
# This workflow builds and deploys a Node.js application to Azure App Service.

name: Build and deploy Node.js app to Azure Web App - E-Helpdesk-back

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: E-Helpdesk-back
  AZURE_WEBAPP_PACKAGE_PATH: "."
  NODE_VERSION: "20.x"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Create .env file for Prisma generation
        run: |
          echo "Creating .env file for Prisma generation..."
          cat > .env << 'EOF'
          DATABASE_URL="postgresql://dummy:dummy@localhost:5432/dummy"
          PORT=8080
          NODE_ENV=production
          EOF
          echo "‚úÖ .env file created"
          cat .env

      - name: Install ALL dependencies
        run: |
          echo "Installing dependencies..."
          npm install
          echo "‚úÖ Dependencies installed"

      - name: Debug environment before generation
        run: |
          echo "üîç Environment debug before Prisma generation..."
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Current directory: $(pwd)"
          echo "Environment variables:"
          echo "DATABASE_URL=$DATABASE_URL"
          echo ""
          echo "Prisma schema check:"
          ls -la prisma/
          echo ""
          echo "Node modules structure:"
          ls -la node_modules/ | grep prisma || echo "No prisma directories found"

      - name: Generate Prisma Client Step by Step
        run: |
          echo "üîß Step-by-step Prisma client generation..."
          
          # Step 1: Check Prisma installation
          echo "Step 1: Checking Prisma installation..."
          npx prisma --version
          
          # Step 2: Validate schema
          echo "Step 2: Validating Prisma schema..."
          npx prisma validate --schema=./prisma/schema.prisma
          
          # Step 3: Generate client
          echo "Step 3: Generating Prisma client..."
          npx prisma generate --schema=./prisma/schema.prisma
          
          echo "‚úÖ All generation steps completed"

      - name: Immediate verification after generation
        run: |
          echo "üîç Immediate verification after generation..."
          
          # Check if .prisma was created
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ node_modules/.prisma directory exists"
            echo "Contents:"
            ls -laR node_modules/.prisma/
          else
            echo "‚ùå node_modules/.prisma directory missing!"
            
            # Check for alternative locations
            echo "Searching for .prisma directories anywhere:"
            find . -name ".prisma" -type d 2>/dev/null || echo "No .prisma directories found"
            
            # Check for any generated files
            echo "Searching for any generated client files:"
            find . -name "*client*" -path "*prisma*" -type f 2>/dev/null || echo "No client files found"
            
            # Check @prisma/client module
            echo "Checking @prisma/client module:"
            ls -la node_modules/@prisma/client/ 2>/dev/null || echo "@prisma/client directory not found"
          fi

      - name: Force Prisma client generation with multiple methods
        run: |
          echo "üî® Forcing Prisma client generation with multiple methods..."
          
          # Method 1: Direct generation
          echo "Method 1: Direct generation"
          npx prisma generate || echo "Method 1 failed"
          
          # Method 2: Using npm script
          echo "Method 2: Using npm script"
          npm run prisma:generate || echo "Method 2 failed"
          
          # Method 3: Force regeneration
          echo "Method 3: Force regeneration"
          rm -rf node_modules/.prisma 2>/dev/null || true
          npx prisma generate --force-update 2>/dev/null || npx prisma generate || echo "Method 3 failed"
          
          # Method 4: Generate with specific binary targets
          echo "Method 4: Generate with binary targets"
          npx prisma generate --generator=client || echo "Method 4 failed"
          
          # Check what was created
          echo "Checking results after all methods..."
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ .prisma directory found!"
            ls -laR node_modules/.prisma/
          else
            echo "‚ùå Still no .prisma directory"
            
            # Last resort: check if files exist in @prisma/client
            if [ -d "node_modules/@prisma/client" ]; then
              echo "Checking @prisma/client contents:"
              ls -la node_modules/@prisma/client/
              
              # Sometimes the client is generated directly in @prisma/client
              if [ -f "node_modules/@prisma/client/index.js" ]; then
                echo "‚úÖ Found client files in @prisma/client"
                echo "Creating symlink for compatibility..."
                mkdir -p node_modules/.prisma/client
                ln -sf ../../@prisma/client/* node_modules/.prisma/client/ 2>/dev/null || true
              fi
            fi
          fi

      - name: Final pre-deployment check
        run: |
          echo "üîç Final pre-deployment check..."
          
          # Check all possible locations for Prisma client
          echo "Checking all Prisma client locations:"
          
          # Location 1: node_modules/.prisma/client
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "‚úÖ Found in node_modules/.prisma/client/index.js"
          else
            echo "‚ùå Not found in node_modules/.prisma/client/index.js"
          fi
          
          # Location 2: @prisma/client
          if [ -f "node_modules/@prisma/client/index.js" ]; then
            echo "‚úÖ Found in node_modules/@prisma/client/index.js"
          else
            echo "‚ùå Not found in node_modules/@prisma/client/index.js"
          fi
          
          # Check for any working client
          if [ -f "node_modules/.prisma/client/index.js" ] || [ -f "node_modules/@prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client is available for deployment"
          else
            echo "‚ùå No Prisma client found anywhere!"
            echo "This will cause deployment failure"
            
            # Debug: show all prisma-related files
            echo "All Prisma-related files:"
            find node_modules -name "*prisma*" -type f | head -20
            exit 1
          fi

      - name: Minimal cleanup (preserve everything Prisma-related)
        run: |
          echo "üì¶ Minimal cleanup while preserving Prisma..."
          
          # Only remove files that are definitely not needed
          rm -rf node_modules/.cache 2>/dev/null || true
          rm -rf **/*.cache 2>/dev/null || true
          rm -rf *.log 2>/dev/null || true
          
          # Do NOT run npm prune --production as it might remove Prisma
          echo "Skipping npm prune to preserve all Prisma files"
          
          # Final verification
          if [ -f "node_modules/.prisma/client/index.js" ] || [ -f "node_modules/@prisma/client/index.js" ]; then
            echo "‚úÖ Prisma client preserved for deployment"
          else
            echo "‚ùå Prisma client lost during cleanup!"
            exit 1
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Comprehensive deployment verification
        run: |
          echo "üìã Deployment package contents:"
          ls -la
          echo ""
          echo "üîç Comprehensive Prisma client verification..."
          
          # Check primary location
          if [ -d "node_modules/.prisma" ]; then
            echo "‚úÖ .prisma directory exists"
            ls -la node_modules/.prisma/
            
            if [ -d "node_modules/.prisma/client" ]; then
              echo "‚úÖ client directory exists"
              ls -la node_modules/.prisma/client/
              
              if [ -f "node_modules/.prisma/client/index.js" ]; then
                echo "‚úÖ index.js exists ($(ls -lh node_modules/.prisma/client/index.js))"
                PRISMA_CLIENT_FOUND=true
              fi
            fi
          else
            echo "‚ùå .prisma directory missing!"
          fi
          
          # Check alternative location
          if [ -f "node_modules/@prisma/client/index.js" ]; then
            echo "‚úÖ Alternative: Found @prisma/client/index.js"
            PRISMA_CLIENT_FOUND=true
          fi
          
          # Final decision
          if [ "$PRISMA_CLIENT_FOUND" = "true" ]; then
            echo "‚úÖ Prisma client is ready for deployment"
          else
            echo "‚ùå Critical: No Prisma client found in deployment package!"
            echo "Available Prisma files:"
            find . -name "*prisma*" -type f | head -20
            exit 1
          fi

      - name: "Deploy to Azure WebApp"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "E-Helpdesk-back"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B848A42705384860A27675DBAFE04932 }}
          package: .
