# Deploy E-Helpdesk Backend to Azure App Service
#
# This workflow builds and deploys a Node.js application to Azure App Service.

name: Build and deploy Node.js app to Azure Web App - E-Helpdesk-back

on:
  push:
    branches: ["main"]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: E-Helpdesk-back
  AZURE_WEBAPP_PACKAGE_PATH: "."
  NODE_VERSION: "20.x"

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Setup environment files for GitHub Actions
        run: |
          node ./prisma/setup-github-env.js
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          PORT: ${{ secrets.PORT || '8080' }}
          DOMAIN: ${{ secrets.DOMAIN }}
          CLIENT_ID: ${{ secrets.CLIENT_ID }}
          CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}

      - name: Install dependencies
        run: npm ci

      - name: Force generate Prisma Client
        run: |
          echo "🔧 Forcing Prisma client generation..."
          # Create .env file with dummy DATABASE_URL for generation
          echo "DATABASE_URL=postgresql://dummy:dummy@localhost:5432/dummy" > .env
          
          # Generate Prisma client
          npx prisma generate
          
          echo "✅ Prisma client generation completed"
        env:
          # Override with dummy URL to avoid connection issues during generation
          DATABASE_URL: "postgresql://dummy:dummy@localhost:5432/dummy"
        
      - name: Verify Prisma Client generation
        run: |
          echo "🔍 Detailed verification of Prisma client..."
          
          # Check if .prisma directory exists
          if [ -d "node_modules/.prisma" ]; then
            echo "✅ .prisma directory found"
            ls -la node_modules/.prisma/
          else
            echo "❌ .prisma directory missing!"
            echo "Searching for any prisma-related directories..."
            find node_modules -name "*prisma*" -type d | head -10
            exit 1
          fi
          
          # Check if client directory exists
          if [ -d "node_modules/.prisma/client" ]; then
            echo "✅ client directory found"
            ls -la node_modules/.prisma/client/ | head -15
          else
            echo "❌ client directory missing!"
            exit 1
          fi
          
          # Check for specific files
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "✅ index.js exists"
            head -5 node_modules/.prisma/client/index.js
          else
            echo "❌ index.js missing!"
            exit 1
          fi
          
          if [ -f "node_modules/.prisma/client/default.js" ]; then
            echo "✅ default.js exists"
          else
            echo "❌ default.js missing!"
            exit 1
          fi

      - name: Prepare for production
        run: |
          echo "📦 Preparing production build..."
          
          # Before pruning, backup the Prisma client
          echo "Backing up Prisma client..."
          cp -r node_modules/.prisma ./prisma-backup
          
          # Remove dev dependencies
          npm prune --production
          
          # Restore Prisma client after pruning
          echo "Restoring Prisma client..."
          rm -rf node_modules/.prisma
          cp -r ./prisma-backup node_modules/.prisma
          rm -rf ./prisma-backup
          
          # Verify restoration
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "✅ Prisma client successfully restored after production build"
          else
            echo "❌ Failed to restore Prisma client!"
            exit 1
          fi

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: .

  deploy:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: "Development"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Final deployment verification
        run: |
          echo "📋 Deployment package contents:"
          ls -la
          echo ""
          echo "🔍 Checking Prisma client in deployment package..."
          
          if [ -d "node_modules/.prisma" ]; then
            echo "✅ .prisma directory exists"
            ls -la node_modules/.prisma/
          else
            echo "❌ .prisma directory missing!"
          fi
          
          if [ -d "node_modules/.prisma/client" ]; then
            echo "✅ client directory exists"
            ls -la node_modules/.prisma/client/ | head -10
          else
            echo "❌ client directory missing!"
          fi
          
          if [ -f "node_modules/.prisma/client/index.js" ]; then
            echo "✅ Prisma client ready for deployment"
          else
            echo "❌ Critical: Prisma client index.js missing!"
            echo "Searching for any prisma files..."
            find . -name "*prisma*" -type f 2>/dev/null | head -10
            exit 1
          fi

      - name: "Deploy to Azure WebApp"
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "E-Helpdesk-back"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B848A42705384860A27675DBAFE04932 }}
          package: .
