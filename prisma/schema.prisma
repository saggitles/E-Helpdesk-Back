generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int        @id @default(autoincrement())
  Username       String?
  Email          String
  FirstName      String?
  LastName       String?
  UserRoleID     Int?
  IoTAccessToken String?
  Comments       Comment[]
  Tickets        Ticket[]
  UserRole       UserRole[] @relation("UserToUserRole")
}

model UserRole {
  id       Int    @id @default(autoincrement())
  RoleName String
  Users    User[] @relation("UserToUserRole")
}

model Image {
  id              Int          @id @default(autoincrement())
  url             String
  ticket_id       Int?
  CommentID       Int?
  guest_ticket_id Int?
  Comment         Comment?     @relation(fields: [CommentID], references: [id])
  Ticket          Ticket?      @relation(fields: [ticket_id], references: [id])
  GuestTicket     GuestTicket? @relation(fields: [guest_ticket_id], references: [id])
}

model File {
  id             Int          @id @default(autoincrement())
  url            String
  name           String
  ticket_id      Int?
  CommentID      Int?
  Guestticket_id Int?
  Comment        Comment?     @relation(fields: [CommentID], references: [id])
  Ticket         Ticket?      @relation(fields: [ticket_id], references: [id])
  GuestTicket    GuestTicket? @relation(fields: [Guestticket_id], references: [id])
}

model Comment {
  id        Int      @id @default(autoincrement())
  Content   String
  ticket_id Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  UserID    Int?
  Ticket    Ticket   @relation(fields: [ticket_id], references: [id])
  User      User?    @relation(fields: [UserID], references: [id])
  Files     File[]
  Images    Image[]
}

model M2MToken {
  id        Int      @id @default(autoincrement())
  token     String   @db.Text // Stores the M2M token (large string)
  expiry    BigInt // UNIX timestamp representing when the token expires
  createdAt DateTime @default(now()) // Automatically store the creation time
  updatedAt DateTime @updatedAt // Automatically update the time when a record is modified
}

model Ticket {
  id            Int       @id @default(autoincrement())
  description   String?
  priority      String
  status        String?
  title         String?
  department    String?
  site_name     String?
  site_id       Int?
  customer_name String?
  customer_id   Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  category      String
  incident_date DateTime?
  vehicle_id    String?
  drivers_name  String?

  dealer       String?
  contact      String?
  solution     String?
  phone        String?
  supported    String?
  platform     String?
  is_escalated String?
  email        String?
  reporter     String?

  jira_ticket_id   Int?
  ticket_number    String?
  comments         Comment[]
  files            File[]
  images           Image[]
  assigned_user_id Int?
  assigned_user    User?       @relation(fields: [assigned_user_id], references: [id])
  jira_ticket      JiraTicket? @relation(fields: [jira_ticket_id], references: [id])
}

model JiraTicket {
  id             Int      @id @default(autoincrement())
  key            String?
  CreationDate   String?
  Description    String?
  ProjectKey     String?
  ProjectName    String?
  ProjectType    String?
  Status         String?
  StatusCategory String?
  Type           String?
  self           String?
  Tickets        Ticket[]
}

model GuestTicket {
  id                    Int      @id @default(autoincrement())
  yourName              String
  yourEmail             String
  vehicleIdOrDriverName String
  reportedBy            String
  customerName          String
  issue                 String
  issueTime             DateTime
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  Files                 File[]
  Images                Image[]
}
