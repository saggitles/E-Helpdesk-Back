generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x", "debian-openssl-3.0.x", "linux-musl", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Fallback mechanism if needed
  // url = env("DATABASE_URL") != "" ? env("DATABASE_URL") : env("POSTGRES_PRISMA_URL")
}

model User {
  id               Int        @id @default(autoincrement())
  username         String?
  email            String
  first_name       String?
  last_name        String?
  user_role_id     Int?
  iot_access_token String?
  comments         Comment[]
  tickets          Ticket[]
  user_role        UserRole[] @relation("UserToUserRole")
}

model UserRole {
  id        Int    @id @default(autoincrement())
  role_name String
  users     User[] @relation("UserToUserRole")
}

model Image {
  id         Int      @id @default(autoincrement())
  url        String
  ticket_id  Int?
  comment_id Int?
  comment    Comment? @relation(fields: [comment_id], references: [id])
  ticket     Ticket?  @relation(fields: [ticket_id], references: [id])
}

model File {
  id         Int      @id @default(autoincrement())
  url        String
  name       String
  ticket_id  Int?
  comment_id Int?
  comment    Comment? @relation(fields: [comment_id], references: [id])
  ticket     Ticket?  @relation(fields: [ticket_id], references: [id])
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  ticket_id  Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user_id    Int?
  ticket     Ticket   @relation(fields: [ticket_id], references: [id])
  user       User?    @relation(fields: [user_id], references: [id])
  files      File[]
  images     Image[]
}

model M2MToken {
  id         Int      @id @default(autoincrement())
  token      String   @db.Text // Stores the M2M token (large string)
  expiry     BigInt // UNIX timestamp representing when the token expires
  created_at DateTime @default(now()) // Automatically store the creation time
  updated_at DateTime @updatedAt // Automatically update the time when a record is modified
}

model Ticket {
  id            Int       @id @default(autoincrement())
  description   String?
  priority      String
  status        String?
  title         String?
  department    String?
  site_name     String?
  site_id       Int?
  customer_name String?
  customer_id   Int?
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  category      String
  incident_date DateTime?
  vehicle_id    String?
  drivers_name  String?

  dealer       String?
  contact_name String?
  solution     String?
  phone        String?
  created_by   String?
  platform     String?
  is_escalated String?
  email        String?
  reporter     String?

  jira_ticket_id   Int?
  ticket_number    String?
  comments         Comment[]
  files            File[]
  images           Image[]
  assigned_user_id Int?
  assigned_user    User?       @relation(fields: [assigned_user_id], references: [id])
  jira_ticket      JiraTicket? @relation(fields: [jira_ticket_id], references: [id])
}

model JiraTicket {
  id              Int      @id @default(autoincrement())
  key             String?
  creation_date   String?
  description     String?
  project_key     String?
  project_name    String?
  project_type    String?
  status          String?
  status_category String?
  type            String?
  self            String?
  tickets         Ticket[]
}
